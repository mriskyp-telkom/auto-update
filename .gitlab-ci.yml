stages:
  - build-staging
  - publish-staging
  - build-production
  - publish-production

variables:
  GITLAB_AUTH_TOKEN: $CI_JOB_TOKEN

.make:
  cache:
    key:
      files:
        - package.json
        - yarn.lock
    paths:
      - node_modules/
      - .yarn/
    policy: pull-push
  artifacts:
    paths:
      # - dist/*.dmg
      - dist/*.exe
      - dist/*.deb

.publish:
  image: google/cloud-sdk:300.0.0-alpine
  script:
    - gcloud auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS
    - gsutil -m cp -r -Z 'dist/*' gs://${BUCKET}/

# staging
make-win-deb-staging:
  image: node:fermium-buster-slim
  extends: .make
  stage: build-staging
  before_script:
    - node -v 
    - apt update && apt upgrade
    - apt install -y gnupg
    - apt install -y software-properties-common
    - apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A6A19B38D3D831EF
    - apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A1715D88E1DF1F24
    - apt update
    - apt install -y git
    - apt install -y python3
    - apt install -y wine64
    - apt install -y dpkg
    - apt install -y fakeroot
    - apt install -y dirmngr apt-transport-https ca-certificates 
    - apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
    - sh -c 'echo "deb https://download.mono-project.com/repo/debian stable-buster main" > /etc/apt/sources.list.d/mono-official-stable.list'
    - apt update
    - apt install -y mono-complete
  script:
    - mv ./.env.staging ./.env && rm ./.env.production
    - npm install yarn
    - yarn install
    - yarn make
  environment:
    name: staging
  allow_failure: false

# make-osx-staging:
#   image: sickcodes/docker-osx
#   extends: .make
#   stage: build-staging
#   environment:
#     name: staging
#   variables:
#     USED_ENV: .env.staging
#     DELETED_ENV: .env.production
#   allow_failure: false

# make-deb-staging:
#   image: node:fermium-bullseye
#   extends: .make
#   stage: build-staging
#   environment:
#     name: staging
#   variables:
#     USED_ENV: .env.staging
#     DELETED_ENV: .env.production
#   allow_failure: false

publish-staging:
  extends: .publish
  stage: publish-staging
  environment:
    name: staging
  variables:
    BUCKET: arkas_releases_staging
    PROJECT: arkas-staging
  needs: ["make-win-deb-staging"]
  allow_failure: false

# production
# make-production:
#   extends: .make
#   stage: build-production
#   before_script:
#     - npm install --global yarn
#   script:
#     - mv .env.production .env && rm .env.staging
#     - yarn make
#   environment:
#     name: production
#   needs: ["publish-staging"]
#   when: manual
#   allow_failure: false
#   only:
#     - main

# publish-production:
#   extends: .publish
#   stage: publish-production
#   environment:
#     name: production
#   variables:
#     BUCKET: arkas_releases_production
#     PROJECT: arkas-production
#   needs: ["make-production"]
#   when: manual
#   allow_failure: false
#   only:
#     - main

